<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Dao.mainDao">
	<select id="containerOne" resultType="member">
		select id, nickname, profile from member join follow using(id) 
		group by id order by count(follower) desc limit 4;
	</select>
	
	<select id="containerTwo" resultType="member">
		select id, nickname, profile from member where isCheck=2 order by joinDate desc limit 4;
	</select>
	
	<select id="containerThree" resultType="art">
		select title, art.file, art.no, nickname from member join art using(id) join likes using(no)
		where art.isCheck=1 group by no order by count(likes.id) desc limit 4;
	</select>
	
	<select id="containerFour" resultType="art">
		select title, art.file, art.no, nickname from member join art using(id) 
		where art.isCheck=1 order by artDate desc limit 4;
	</select>
	
	<select id="feed" parameterType="java.util.HashMap" resultType="art">
		select title, a.no, nickname, a.file from member join art a using(id) join follow f on a.id=f.following 
		where f.id=#{id} order by a.artDate desc limit 0, #{qty};
	</select>
	
	<insert id="sendMessage" parameterType="message">
		insert into message values(#{isTo},#{isFrom},#{content},default,#{file});
	</insert>
	
	<select id="messageList" parameterType="String" resultType="message">
		select distinct isTo, isFrom from message where isTo=#{isTo} or isFrom=#{isTo} order by time desc;
	</select>
	
	<select id="logMessage" parameterType="message" resultType="message">
		select * from message where (isTo=#{isTo} and isFrom=#{isFrom}) or (isTo=#{isFrom} and isFrom=#{isTo}) order by time;
	</select>
	
	<delete id="deleteMessage" parameterType="message">
		delete from message where (isTo=#{isTo} and isFrom=#{isFrom}) or (isTo=#{isFrom} and isFrom=#{isTo});
	</delete>
	
	<insert id="insertAlarm" parameterType="java.util.HashMap">
	insert into alarm values(#{type}, default, #{to}, #{from}, 1, 0);
	</insert>
	
	<update id="updateAlarm" parameterType="int">
	update alarm set readCheck = 2 where no = #{no}
	</update>
	
	<delete id="deleteAlarm" parameterType="int">
	delete from alarm where no = #{no}
	</delete>
	
	<select id="selectAlarm" parameterType="alarm" resultType="alarm">
	select * from alarm where isTo = #{isTo} 
	<if test="readCheck!=0">and readCheck = #{readCheck}</if>
	 order by time desc
	</select>
	
	<select id="alarmCount" parameterType="String" resultType="int">
	select count(*) from alarm where isTo = #{isTo} and readCheck=1 
	</select>
	
</mapper>

  